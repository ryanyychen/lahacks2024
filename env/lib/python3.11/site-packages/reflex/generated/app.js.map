{"version":3,"sources":["widgetBase.ts","text.ts","row.ts","column.ts","dropdown.ts","rectangle.ts","stack.ts","mouseEventListener.ts","textInput.ts","placeholder.ts","switch.ts","progressCircle.ts","plot.ts","align.ts","margin.ts","mediaPlayer.ts","app.ts"],"names":[],"mappings":";AAiHkC,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAjHlC,IAAA,EAAA,QAAA,SAeA,EAAA,WAKI,SAAA,EAAY,EAAmB,GAC3B,KAAK,UAAY,EACjB,KAAK,MAAQ,EACb,KAAK,oBAAsB,GAwFnC,OAnFI,OAAA,eAAI,EAAA,UAAA,UAAO,CAAX,IAAA,WACI,IAAI,EAAU,SAAS,eAAe,KAAK,WAE3C,GAAgB,OAAZ,EACA,MAAM,IAAI,MACN,gCAAA,OAAgC,KAAK,UAAS,6BAItD,OAAO,GA4EmB,YAAA,EAAA,cAAA,IA3D9B,EAAA,UAAA,mBAAA,aAMA,EAAA,UAAA,2BAAA,SAA2B,GAEvB,IAAK,IAAI,KAAO,KAAK,oBACX,KAAO,GACT,KAAK,QAAQ,MAAM,eAAe,GAK1C,IAAK,IAAI,KAAO,EACZ,KAAK,QAAQ,MAAM,YAAY,EAAK,EAAc,IAItD,KAAK,oBAAsB,GAM/B,EAAA,UAAA,qBAAA,SAAqB,IACjB,EAAA,EAAA,iCAAgC,gBAAiB,CAE7C,SAAU,SAAS,KAAK,UAAU,UAAU,KAC5C,QAAS,KAIjB,EAAA,UAAA,2BAAA,SAA2B,GAEvB,KAAK,MAAK,EAAA,EAAA,GACH,KAAK,OACL,GAKP,KAAK,cAAc,KAAK,QAAS,IAGrC,EAAA,UAAA,yBAAA,SAAyB,GAErB,KAAK,2BAA2B,IAGhC,EAAA,EAAA,iCAAgC,oBAAqB,CAEjD,SAAU,SAAS,KAAK,UAAU,UAAU,KAC5C,WAAY,KAGxB,EAhGA,GAAsB,QAAA,WAAA,EAkGtB,WAAW,WAAa;;ACvGX,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EATb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAQA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAsCb,OAtCgC,EAAA,EAAA,GAC5B,EAAA,UAAA,cAAA,WACI,IAAI,EAAmB,SAAS,cAAc,OAC9C,EAAiB,UAAU,IAAI,eAE/B,IAAI,EAAc,SAAS,cAAc,OAEzC,OADA,EAAiB,YAAY,GACtB,GAGX,EAAA,UAAA,cAAA,SAAc,EAA+B,GACzC,IAAI,EAAc,EAAiB,kBAYnC,QAVwB,IAApB,EAAW,OACX,EAAY,UAAY,EAAW,WAGV,IAAzB,EAAW,YACX,EAAY,MAAM,WAAa,EAAW,UACpC,SACA,eAGe,IAArB,EAAW,MAAqB,CAChC,IAAM,EAAQ,EAAW,MACzB,EAAY,MAAM,WAAa,EAAM,SACrC,EAAY,MAAM,OAAQ,EAAA,EAAA,YAAW,EAAM,WAC3C,EAAY,MAAM,SAAW,EAAM,SAAW,KAC9C,EAAY,MAAM,UAAY,EAAM,OAAS,SAAW,SACxD,EAAY,MAAM,WAAa,EAAM,WACrC,EAAY,MAAM,eAAiB,EAAM,WACnC,YACA,OACN,EAAY,MAAM,cAAgB,EAAM,QAClC,YACA,SAGlB,EAtCA,CAAgC,EAAA,YAAnB,QAAA,WAAA;;ACDA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EATb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAQA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAgCb,OAhC+B,EAAA,EAAA,GAC3B,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAErC,OADA,EAAQ,UAAU,IAAI,cACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,IAChC,EAAA,EAAA,iBAAgB,EAAS,EAAW,eAET,IAAvB,EAAW,UACX,EAAQ,MAAM,IAAM,GAAA,OAAG,EAAW,QAAO,QAIjD,EAAA,UAAA,mBAAA,WAII,IAHA,IAAI,EAAyB,GACzB,GAAa,EAEG,EAAA,EAAA,EAAA,KAAK,MAAgB,SAArB,EAAA,EAAA,OAAA,IAAwB,CAAvC,IAAI,EAAO,EAAA,GACR,GAAQ,EAAA,EAAA,uBAAsB,GAClC,EAAS,KAAK,GACd,EAAa,GAAc,EAAM,MAAc,OAAE,GAGrD,IAAkB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,EAAnB,EAAK,EAAA,IACJ,2BAA2B,CAC7B,aACK,GAAc,EAAM,MAAc,OAAE,GAAK,IAAM,QAIpE,EAhCA,CAA+B,EAAA,YAAlB,QAAA,UAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EATb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAQA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAgCb,OAhCkC,EAAA,EAAA,GAC9B,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAErC,OADA,EAAQ,UAAU,IAAI,iBACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,IAChC,EAAA,EAAA,iBAAgB,EAAS,EAAW,eAET,IAAvB,EAAW,UACX,EAAQ,MAAM,IAAM,GAAA,OAAG,EAAW,QAAO,QAIjD,EAAA,UAAA,mBAAA,WAII,IAHA,IAAI,EAAyB,GACzB,GAAa,EAEG,EAAA,EAAA,EAAA,KAAK,MAAgB,SAArB,EAAA,EAAA,OAAA,IAAwB,CAAvC,IAAI,EAAO,EAAA,GACR,GAAQ,EAAA,EAAA,uBAAsB,GAClC,EAAS,KAAK,GACd,EAAa,GAAc,EAAM,MAAc,OAAE,GAGrD,IAAkB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAU,EAAnB,EAAK,EAAA,IACJ,2BAA2B,CAC7B,aACK,GAAc,EAAM,MAAc,OAAE,GAAK,IAAM,QAIpE,EAhCA,CAAkC,EAAA,YAArB,QAAA,aAAA;;ACDA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EARb,IAAA,EAAA,QAAA,gBAQA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAkCb,OAlCoC,EAAA,EAAA,GAChC,EAAA,UAAA,cAAA,WAAA,IAAA,EAAA,KACQ,EAAU,SAAS,cAAc,UASrC,OARA,EAAQ,UAAU,IAAI,mBAEtB,EAAQ,iBAAiB,QAAS,WAC9B,EAAK,qBAAqB,CACtB,KAAM,EAAQ,UAIf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,GAChC,QAA+B,IAA3B,EAAW,YAA2B,CACtC,EAAQ,UAAY,GAEpB,IAAuB,IAAA,EAAA,EAAA,EAAA,EAAW,YAAX,EAAA,EAAA,OAAA,IAAwB,CAA1C,IAAI,EAAU,EAAA,GACX,EAAS,SAAS,cAAc,UACpC,EAAO,MAAQ,EACf,EAAO,KAAO,EACd,EAAQ,YAAY,SAII,IAA5B,EAAW,eACqB,OAA5B,EAAW,aACV,EAA8B,eAAiB,EAE/C,EAA8B,MAAQ,EAAW,eAIlE,EAlCA,CAAoC,EAAA,YAAvB,QAAA,eAAA;;ACiEA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EAzEb,IAAA,EAAA,QAAA,SAOA,EAAA,QAAA,gBAWA,SAAS,EACL,EACA,EACA,EACA,GAGA,QAAc,IAAV,EAAJ,CAMA,IAAI,EAAoB,GAEV,OAAV,EACA,EAAY,CACR,WAAY,cAEZ,eAAgB,cAChB,eAAgB,MAEhB,yBAA0B,MAC1B,0BAA2B,MAC3B,6BAA8B,MAC9B,4BAA6B,MAE7B,eAAgB,cAChB,gBAAiB,MACjB,kBAAmB,MACnB,kBAAmB,QAGvB,EAAsB,YAAI,EAAA,EAAA,WAAU,EAAM,MAE1C,EAAU,iBAAkB,EAAA,EAAA,YAAW,EAAM,aAC7C,EAAU,gBAAkB,GAAA,OAAG,EAAM,YAAW,MAEhD,EAAU,0BAA4B,GAAA,OAAG,EAAM,aAAa,GAAE,MAC9D,EAAU,2BAA6B,GAAA,OAAG,EAAM,aAAa,GAAE,MAC/D,EAAU,8BAAgC,GAAA,OAAG,EAAM,aAAa,GAAE,MAClE,EAAU,6BAA+B,GAAA,OAAG,EAAM,aAAa,GAAE,MAEjE,EAAU,iBAAkB,EAAA,EAAA,YAAW,EAAM,aAC7C,EAAU,iBAAmB,GAAA,OAAG,EAAM,aAAY,MAClD,EAAU,mBAAqB,GAAA,OAAG,EAAM,aAAa,GAAE,MACvD,EAAU,mBAAqB,GAAA,OAAG,EAAM,aAAa,GAAE,OAI3D,IAA2B,IAAA,EAAA,EAAA,EAAA,OAAO,QAAQ,GAAf,EAAA,EAAA,OAAA,IAA2B,CAA3C,IAAA,EAAA,EAAA,GAAC,EAAG,EAAA,GAAE,EAAK,EAAA,GAClB,EAAQ,MAAM,YAAY,KAAA,OAAK,GAAM,OAAG,GAAG,OAAG,GAAU,KAIhE,IAAA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KA6Cb,OA7CqC,EAAA,EAAA,GACjC,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAGrC,OAFA,EAAQ,UAAU,IAAI,oBACtB,EAAQ,UAAU,IAAI,2BACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,IAChC,EAAA,EAAA,kBAAiB,EAAS,EAAW,OAErC,EAAqB,EAAS,EAAW,MAAO,aAAc,SAE3B,IAA/B,EAAW,kBACX,EAAQ,MAAM,mBAAqB,GAAA,OAAG,EAAW,gBAAe,MAGrC,OAA3B,EAAW,YACX,EAAQ,UAAU,OAAO,+BACS,IAA3B,EAAW,cAClB,EAAQ,UAAU,IAAI,0BACtB,EACI,EACA,EAAW,YACX,aACA,gBAIkB,IAAtB,EAAW,SACe,YAAtB,EAAW,OACX,EAAQ,MAAM,eAAe,UAE7B,EAAQ,MAAM,OAAS,EAAW,SAK9C,EAAA,UAAA,mBAAA,WACI,IAAI,EAAQ,KAAK,MAAa,MAE1B,MAAA,IACA,EAAA,EAAA,uBAAsB,GAAO,2BAA2B,KAGpE,EA7CA,CAAqC,EAAA,YAAxB,QAAA,gBAAA;;ACjEA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EARb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAOA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAkBb,OAlBiC,EAAA,EAAA,GAC7B,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAErC,OADA,EAAQ,UAAU,IAAI,gBACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,GAChC,QAA4B,IAAxB,EAAW,SAAwB,EACnC,EAAA,EAAA,iBAAgB,EAAS,EAAW,UAGpC,IADA,IAAI,EAAS,EACK,EAAA,EAAA,EAAA,EAAQ,SAAR,EAAA,EAAA,OAAA,IAAkB,CAAtB,EAAA,GACa,MAAM,OAAS,GAAA,OAAG,GACzC,GAAU,KAI1B,EAlBA,CAAiC,EAAA,YAApB,QAAA,YAAA;;ACkBA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,8BAAA,EA1Bb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAEA,SAAS,EAAyB,GAC9B,MAAO,CACH,OAAQ,CAAC,OAAQ,SAAU,SAAS,EAAM,SAIlD,SAAS,EAA2B,GAChC,MAAO,CACH,EAAG,EAAM,QAAU,EAAA,YACnB,EAAG,EAAM,QAAU,EAAA,aAc3B,IAAA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KA4Eb,OA5E8C,EAAA,EAAA,GAC1C,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAErC,OADA,EAAQ,UAAU,IAAI,2BACf,GAGX,EAAA,UAAA,cAAA,SACI,EACA,GAFJ,IAAA,EAAA,MAII,EAAA,EAAA,kBAAiB,EAAS,EAAW,OAEjC,EAAW,gBACX,EAAQ,YAAc,SAAC,GACnB,EAAK,qBAAoB,EAAA,EAAA,CACrB,KAAM,aACH,EAAyB,IACzB,EAA2B,MAItC,EAAQ,YAAc,KAGtB,EAAW,cACX,EAAQ,UAAY,SAAC,GACjB,EAAK,qBAAoB,EAAA,EAAA,CACrB,KAAM,WACH,EAAyB,IACzB,EAA2B,MAItC,EAAQ,UAAY,KAGpB,EAAW,gBACX,EAAQ,YAAc,SAAC,GACnB,EAAK,qBAAoB,EAAA,CACrB,KAAM,aACH,EAA2B,MAItC,EAAQ,YAAc,KAGtB,EAAW,iBACX,EAAQ,aAAe,SAAC,GACpB,EAAK,qBAAoB,EAAA,CACrB,KAAM,cACH,EAA2B,MAItC,EAAQ,aAAe,KAGvB,EAAW,iBACX,EAAQ,aAAe,SAAC,GACpB,EAAK,qBAAoB,EAAA,CACrB,KAAM,cACH,EAA2B,MAItC,EAAQ,aAAe,MAI/B,EAAA,UAAA,mBAAA,YACI,EAAA,EAAA,uBAAsB,KAAK,MAAa,OAAG,2BACvC,KAGZ,EA5EA,CAA8C,EAAA,YAAjC,QAAA,yBAAA;;ACjBA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EATb,IAAA,EAAA,QAAA,gBASA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KA2Cb,OA3CqC,EAAA,EAAA,GACjC,EAAA,UAAA,cAAA,WAAA,IAAA,EAAA,KACQ,EAAU,SAAS,cAAc,SAuBrC,OAtBA,EAAQ,UAAU,IAAI,qBAGtB,EAAQ,iBAAiB,OAAQ,WAC7B,EAAK,yBAAyB,CAC1B,KAAM,EAAQ,UAStB,EAAQ,iBAAiB,UAAW,SAAC,GACf,UAAd,EAAM,KACN,EAAK,qBAAqB,CACtB,KAAM,EAAQ,UAKnB,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,GAChC,IAAI,EAAe,OAEO,IAAtB,EAAW,SACX,EAAa,KAAO,EAAW,OAAS,WAAa,aAGjC,IAApB,EAAW,OACX,EAAa,MAAQ,EAAW,WAGL,IAA3B,EAAW,cACX,EAAa,YAAc,EAAW,cAGlD,EA3CA,CAAqC,EAAA,YAAxB,QAAA,gBAAA;;ACDA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,EARb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAOA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAgBb,OAhBuC,EAAA,EAAA,GACnC,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAErC,OADA,EAAQ,UAAU,IAAI,2BACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,IAChC,EAAA,EAAA,kBAAiB,EAAS,EAAW,UAGzC,EAAA,UAAA,mBAAA,YACI,EAAA,EAAA,uBAAsB,KAAK,MAAe,SAAG,2BACzC,KAGZ,EAhBA,CAAuC,EAAA,YAA1B,QAAA,kBAAA;;ACIA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAZb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAWA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAuEb,OAvEkC,EAAA,EAAA,GAC9B,EAAA,UAAA,cAAA,WAAA,IAAA,EAAA,KACQ,EAAU,SAAS,cAAc,OACrC,EAAQ,UAAU,IAAI,iBAEtB,IAAI,EAAmB,SAAS,cAAc,OAC9C,EAAiB,UAAU,IAAI,aAC/B,EAAQ,YAAY,GAEpB,IAAI,EAAkB,SAAS,cAAc,SAC7C,EAAgB,KAAO,WACvB,EAAiB,YAAY,GAE7B,IAAI,EAAc,SAAS,cAAc,OAUzC,OATA,EAAY,UAAU,IAAI,QAC1B,EAAiB,YAAY,GAE7B,EAAgB,iBAAiB,SAAU,WACvC,EAAK,yBAAyB,CAC1B,MAAO,EAAgB,YAIxB,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,GAChC,QAAyB,IAArB,EAAW,MAAqB,CAC5B,EAAW,MACX,EAAQ,UAAU,IAAI,SAEtB,EAAQ,UAAU,OAAO,SAM7B,IAAI,EAAkB,EAAQ,cAAc,UACxC,MAAA,OAAe,EAAf,EAAiB,WAAY,EAAW,QACxC,EAAiB,QAAU,EAAW,YAId,IAA5B,EAAW,cACX,EAAQ,MAAM,YACV,2BACA,EAAA,EAAA,YAAW,EAAW,oBAIC,IAA3B,EAAW,aACX,EAAQ,MAAM,YACV,0BACA,EAAA,EAAA,YAAW,EAAW,mBAIQ,IAAlC,EAAW,oBACX,EAAQ,MAAM,YACV,iCACA,EAAA,EAAA,YAAW,EAAW,0BAIO,IAAjC,EAAW,mBACX,EAAQ,MAAM,YACV,gCACA,EAAA,EAAA,YAAW,EAAW,qBAItC,EAvEA,CAAkC,EAAA,YAArB,QAAA,aAAA;;ACFA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,0BAAA,EAVb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBASA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAyCb,OAzC0C,EAAA,EAAA,GACtC,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAQrC,OAPA,EAAQ,UAAY,kOAMpB,EAAQ,UAAU,IAAI,0BACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,GAYhC,QAXyB,IAArB,EAAW,QACX,EAAQ,MAAM,QAAS,EAAA,EAAA,YAAW,EAAW,aAGb,IAAhC,EAAW,kBACX,EAAQ,MAAM,YACV,sBACA,EAAA,EAAA,YAAW,EAAW,wBAIF,IAAxB,EAAW,SACX,GAA4B,OAAxB,EAAW,SACX,EAAQ,UAAU,IAAI,gBACnB,CACH,EAAQ,UAAU,OAAO,YAEzB,IAAI,EAAa,GAAK,KAAK,GAC3B,EAAQ,MAAM,YACV,cACA,GAAA,OAAG,EAAW,SAAW,EAAU,MAAA,QAC9B,EAAI,EAAW,UAAY,MAMpD,EAzCA,CAA0C,EAAA,YAA7B,QAAA,qBAAA;;ACqBA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EA/Bb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAQA,SAAS,EAAW,GAChB,GAAsB,oBAAX,OAAwB,CAC/B,QAAQ,IAAI,sBACZ,IAAI,EAAS,SAAS,cAAc,UACpC,EAAO,IAAM,8BACb,EAAO,OAAS,EAChB,SAAS,KAAK,YAAY,QAE1B,IAIR,SAAS,EAAW,EAAsB,GAEtC,EAAQ,MAAM,YAAa,EAAA,EAAA,WAAU,EAAM,MAG3C,EAAQ,MAAM,aAAe,GAAA,OAAG,EAAM,aAAa,GAAE,OAAA,OAAM,EAAM,aAAa,GAAE,OAAA,OAAM,EAAM,aAAa,GAAE,OAAA,OAAM,EAAM,aAAa,GAAE,MAK1I,IAAA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAqBb,OArBgC,EAAA,EAAA,GAC5B,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAKrC,OAJA,EAAQ,MAAM,QAAU,eAGxB,EAAQ,MAAM,SAAW,SAClB,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,GAChC,EAAQ,UAAY,GACpB,EAAW,WACP,IAAI,EAAW,KAAK,MAAM,EAAW,UACrC,OAAO,QAAQ,EAAS,EAAS,KAAM,EAAS,OAAQ,CACpD,YAAY,IAGhB,EAAW,EAAS,EAAW,aAG3C,EArBA,CAAgC,EAAA,YAAnB,QAAA,WAAA;;ACrBA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAVb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBASA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAiDb,OAjDiC,EAAA,EAAA,GAC7B,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAErC,OADA,EAAQ,UAAU,IAAI,gBACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,IAChC,EAAA,EAAA,kBAAiB,EAAS,EAAW,QAGzC,EAAA,UAAA,mBAAA,WAEI,IAKI,EAUA,EAfA,EAAkB,KAAK,MAAe,QACtC,EAAkB,KAAK,MAAe,QAEtC,EAAgB,GAGJ,OAAZ,GACA,EAAqB,MAAI,OACzB,EAAc,IAEd,EAAqB,MAAI,cACzB,EAAoB,KAAI,GAAA,OAAa,IAAV,EAAa,KACxC,GAAyB,IAAX,GAIF,OAAZ,GACA,EAAsB,OAAI,OAC1B,EAAc,IAEd,EAAsB,OAAI,cAC1B,EAAmB,IAAI,GAAA,OAAa,IAAV,EAAa,KACvC,GAAyB,IAAX,GAGE,IAAhB,GAAqC,IAAhB,IACrB,EACe,UACX,aAAA,OAAa,EAAW,OAAA,OAAM,EAAW,QAIjD,EAAA,EAAA,uBAAsB,KAAK,MAAa,OAAG,2BACvC,IAGZ,EAjDA,CAAiC,EAAA,YAApB,QAAA,YAAA;;ACEA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAZb,IAAA,EAAA,QAAA,SACA,EAAA,QAAA,gBAWA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KA4Cb,OA5CkC,EAAA,EAAA,GAC9B,EAAA,UAAA,cAAA,WACI,IAAI,EAAU,SAAS,cAAc,OAGrC,OAFA,EAAQ,UAAU,IAAI,iBACtB,EAAQ,UAAU,IAAI,2BACf,GAGX,EAAA,UAAA,cAAA,SAAc,EAAsB,IAChC,EAAA,EAAA,kBAAiB,EAAS,EAAW,YAEN,IAA3B,EAAW,cACX,EAAQ,MAAM,YAAc,GAAA,OAAG,EAAW,YAAW,YAG3B,IAA1B,EAAW,aACX,EAAQ,MAAM,WAAa,GAAA,OAAG,EAAW,WAAU,YAGvB,IAA5B,EAAW,eACX,EAAQ,MAAM,aAAe,GAAA,OAAG,EAAW,aAAY,YAG1B,IAA7B,EAAW,gBACX,EAAQ,MAAM,cAAgB,GAAA,OAAG,EAAW,cAAa,QAIjE,EAAA,UAAA,mBAAA,YAYI,EAAA,EAAA,uBAAsB,KAAK,MAAa,OAAG,2BACvC,KAGZ,EA5CA,CAAkC,EAAA,YAArB,QAAA,aAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,uBAAA,OAAA,GAAA,iCAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA,EAZb,IAAA,EAAA,QAAA,gBAYA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KA+Bb,OA/BuC,EAAA,EAAA,GACnC,EAAA,UAAA,cAAA,WAEI,OADc,SAAS,cAAc,UAIzC,EAAA,UAAA,cAAA,SAAc,EAA2B,QACZ,IAArB,EAAW,QACX,EAAQ,IAAM,EAAW,YAGL,IAApB,EAAW,OACX,EAAQ,KAAO,EAAW,WAGF,IAAxB,EAAW,WACX,EAAQ,SAAW,EAAW,eAGN,IAAxB,EAAW,WACX,EAAQ,SAAW,EAAW,eAGT,IAArB,EAAW,QACX,EAAQ,MAAQ,EAAW,YAGL,IAAtB,EAAW,SACX,EAAQ,OAAS,EAAW,SAGxC,EA/BA,CAAuC,EAAA,YAA1B,QAAA,kBAAA;;ACovBP,aAAA,IAAA,SAAA,MAAA,KAAA,UAAA,WAAA,OAAA,SAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,UAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,YAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,IAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gCAAA,QAAA,yBAAA,QAAA,gBAAA,QAAA,iBAAA,QAAA,wCAAA,QAAA,wCAAA,QAAA,sBAAA,QAAA,qBAAA,QAAA,UAAA,QAAA,WAAA,QAAA,iBAAA,EAhwBN,IAAA,OAAA,QAAA,UACA,MAAA,QAAA,SACA,SAAA,QAAA,YACA,WAAA,QAAA,cACA,YAAA,QAAA,eACA,QAAA,QAAA,WAEA,qBAAA,QAAA,wBACA,YAAA,QAAA,eACA,cAAA,QAAA,iBACA,SAAA,QAAA,YAEA,iBAAA,QAAA,oBACA,OAAA,QAAA,UACA,QAAA,QAAA,WACA,SAAA,QAAA,YACA,cAAA,QAAA,iBAEM,aAAe,kBAGf,sBACF,0BAEA,OAA2B,KACpB,QAAA,YAAc,GAEzB,IAAM,oBAAsB,IAAI,QAEhC,SAAgB,WAAW,GAChB,IAAA,EAAc,EAAK,GAAhB,EAAW,EAAK,GAAb,EAAQ,EAAK,GAAV,EAAK,EAAK,GAC1B,MAAO,QAAA,OAAY,IAAJ,EAAO,MAAA,OAAS,IAAJ,EAAO,MAAA,OAAS,IAAJ,EAAO,MAAA,OAAK,EAAC,KAGxD,SAAgB,UAAU,GAEtB,GAAkB,UAAd,EAAK,KACL,OAAO,WAAW,EAAK,OAI3B,GAAkB,mBAAd,EAAK,KAA2B,CAChC,GAAyB,GAArB,EAAK,MAAM,OACX,OAAO,WAAW,EAAK,MAAM,GAAG,IAIpC,IADA,IAAI,EAAwB,GACnB,EAAI,EAAG,EAAI,EAAK,MAAM,OAAQ,IAAK,CACxC,IAAI,EAAQ,EAAK,MAAM,GAAG,GACtB,EAAW,EAAK,MAAM,GAAG,GAC7B,EAAY,KAAK,GAAA,OAAG,WAAW,GAAM,KAAA,OAAe,IAAX,EAAc,MAG3D,MAAO,mBAAA,OAAmB,EAAK,aAAY,SAAA,OAAQ,EAAY,KAC3D,MACH,KAIL,GAAkB,UAAd,EAAK,KAAkB,CACvB,IAAI,EAAS,QAAA,OAAQ,EAAK,SAAQ,MAElC,GAAqB,OAAjB,EAAK,SACL,MAAO,GAAA,OAAG,EAAM,6BACb,GAAqB,WAAjB,EAAK,SACZ,MAAO,GAAA,OAAG,EAAM,yBACb,GAAqB,QAAjB,EAAK,SACZ,MAAO,GAAA,OAAG,EAAM,oBACb,GAAqB,QAAjB,EAAK,SACZ,MAAO,GAAA,OAAG,EAAM,2BAIhB,KAAM,qCAAA,OAAqC,EAAK,MAMxD,KAAM,sBAAA,OAAsB,EAAK,MAGrC,SAAgB,qBAAqB,GACjC,IAAI,EAAU,SAAS,eAAe,aAAA,OAAa,IAEnD,GAAgB,OAAZ,EACA,KAAM,iCAAA,OAAiC,GAG3C,OAAO,EAGX,SAAgB,sBAAsB,GAClC,IAAI,EAAU,qBAAqB,GAE/B,EAAW,oBAAoB,IAAI,GAEvC,QAAiB,IAAb,EACA,KAAM,iCAAA,OAAiC,GAG3C,OAAO,EAGX,SAAgB,wCACZ,GAIA,IAFA,IAAI,EAAa,EAAQ,cAEH,OAAf,GAAqB,CACxB,GAAI,EAAW,GAAG,WAAW,cACzB,OAAO,EAGX,EAAa,EAAW,cAG5B,OAAO,KAGX,SAAgB,wCACZ,GAIA,IAFA,IAAI,EAAiC,IAExB,CAGT,GAAmB,QAFnB,EAAa,wCAAwC,IAGjD,OAAO,KAGX,GAAI,EAAW,GAAG,MAAM,kBACpB,OAAO,GAxGnB,QAAA,WAAA,WAKA,QAAA,UAAA,UAgDA,QAAA,qBAAA,qBAUA,QAAA,sBAAA,sBAYA,QAAA,wCAAA,wCAgBA,QAAA,wCAAA,wCAkBA,IAAM,cAAgB,CAClB,gBAAiB,QAAA,YACjB,iBAAkB,SAAA,aAClB,mBAAoB,WAAA,eACpB,iBAAkB,SAAA,aAClB,sBAAuB,cAAA,kBACvB,6BAA8B,qBAAA,yBAC9B,eAAgB,OAAA,WAChB,yBAA0B,iBAAA,qBAC1B,oBAAqB,YAAA,gBACrB,cAAe,MAAA,UACf,gBAAiB,QAAA,YACjB,iBAAkB,SAAA,aAClB,eAAgB,OAAA,WAChB,oBAAqB,YAAA,gBACrB,YAAa,cAAA,mBAKjB,SAAe,eAAe,SAkmBxB,OAAA,UAAA,UAAA,OAAA,EAAA,WAAA,IAAA,SAAA,IAAA,OAAA,YAAA,KAAA,SAAA,IAAA,OAAA,GAAA,OAAA,KAAA,EA9lBF,OAHA,QAAQ,IAAI,qBAAsB,cAGX,IAAnB,QAAQ,OACR,CAAA,GAOkB,sBAAlB,QAAQ,OAAR,CAAA,EAAA,GACA,CAAA,EAAM,mBACF,QAAQ,OAAO,YACf,QAAQ,OAAO,eAmlBrB,KAAA,EAAA,OArlBE,GAAA,OAIA,SAAW,KAilBb,CAAA,EAAA,GAAA,KAAA,EA9kBO,MAAkB,sBAAlB,QAAQ,OAAR,CAAA,EAAA,GACM,CAAA,EAAM,KAAK,QAAQ,OAAO,mBA6kBvC,KAAA,EAAA,OA7kBE,SAAW,GAAA,OA6kBb,CAAA,EAAA,GAAA,KAAA,EA1kBO,MAAkB,qBAAlB,QAAQ,OAAR,CAAA,EAAA,GACL,CAAA,EAAM,kBAAkB,QAAQ,SAykBlC,KAAA,EAAA,OAzkBE,GAAA,OACA,SAAW,KAwkBb,CAAA,EAAA,GAAA,KAAA,EArkBG,GAAsB,mBAAlB,QAAQ,OAWb,KAAM,mCAAA,OAAmC,SAVzC,IAAS,OAAO,QAAQ,OAAO,cAC3B,aAAa,QACT,sBAAA,OAAsB,KACtB,KAAK,UAAU,QAAQ,OAAO,cAAc,OAGpD,SAAW,KA8jBb,GAAA,MAAA,EAAA,KAAA,EAtjBF,MAAA,CAAA,EAAM,yBAAyB,CAC3B,QAAS,MACT,GAAI,QAAQ,GACZ,OAAQ,YAmjBV,KAAA,EAAA,OAtjBF,GAAA,OAsjBE,CAAA,QA/iBN,SAAS,sBACL,EACA,GAEA,IAAI,EAAgB,SAAS,eAAe,aAAA,OAAa,IAEzD,GAAsB,OAAlB,EACA,OAAO,EAGX,IAAI,EAAiB,oBAAoB,IAAI,GAE7C,YAAuB,IAAnB,EACO,EAGX,SAAA,SAAA,GACO,EAAe,OACf,GAIX,SAAS,yBACL,EACA,EACA,GAEA,IAAI,EAAc,sBAAsB,EAAU,GAC9C,EAAW,EAGX,EAAS,EAAsB,SACnC,GACkB,IAAd,EAAO,IACO,IAAd,EAAO,IACO,IAAd,EAAO,IACO,IAAd,EAAO,GACT,CACE,IAAI,EAAW,GAAA,OAAG,EAAQ,WAC1B,EAAQ,GAAY,CAChB,OAAQ,iBACR,cAAe,oBACf,OAAQ,EAAoB,OAC5B,OAAQ,EAAoB,OAE5B,MAAO,EACP,YAAa,EAAO,GACpB,WAAY,EAAO,GACnB,aAAc,EAAO,GACrB,cAAe,EAAO,IAE1B,EAAW,EAIf,IAAI,EAAQ,EAAqB,QACjC,GAAiB,OAAb,EAAM,IAA4B,OAAb,EAAM,GAAa,CACxC,IAAI,EAAU,GAAA,OAAG,EAAQ,UACzB,EAAQ,GAAW,CACf,OAAQ,gBACR,cAAe,mBACf,OAAQ,EAAoB,OAC5B,OAAQ,EAAoB,OAE5B,MAAO,EACP,QAAS,EAAM,GACf,QAAS,EAAM,IAEnB,EAAW,EAGf,OAAO,EAGX,SAAS,iCACL,EACA,EACA,GAKA,SAAS,EAAQ,GACb,OAAO,EAAG,MAAM,KAAK,GAGzB,IAAyB,IAAA,EAAA,EAAA,EANrB,sBAAsB,EAAmB,SAAO,GAM3B,EAAA,EAAA,OAAA,IAA2B,CAA/C,IAAI,EAAY,EAAA,GACb,EAAgB,EAAW,GAE/B,GAAI,MAAM,QAAQ,GACd,EAAW,GAAgB,EAAc,IAAI,SAAC,GAG1C,OAFA,EAAU,EAAQ,EAAQ,YAC1B,EAAS,IAAI,GACN,yBACH,EACA,EAAQ,IAAY,GACpB,UAGL,GAAsB,OAAlB,EAAwB,CAC/B,IAAI,EAAU,EAAQ,EAAc,YACpC,EAAW,GAAgB,yBACvB,EACA,EAAQ,IAAY,GACpB,GAEJ,EAAS,IAAI,KAKzB,SAAS,kBACL,EACA,GAI4B,iBAAjB,IACP,EAAe,EAAa,YAUhC,IAPA,IAAI,EAAoB,OAAO,KAAK,GAGhC,EAAwB,IAAI,IAIX,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAmB,CACpC,iCAAiC,EAD5B,EAAQ,EAAA,IACuC,EAAU,GAKlE,IAAqB,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAmB,CAAnC,IAAI,EAAQ,EAAA,GAEb,IAAI,EAAS,IAAI,GAIjB,GAAI,IAAa,EAAjB,CAUA,IAAI,EAAe,SAAS,eAAe,aAAA,OAAa,IACxD,GAAqB,OAAjB,EAAJ,CAIA,IAAI,EACA,wCAAwC,GAC5C,GAAsB,OAAlB,EAAJ,CAIA,IAAI,EAAiB,oBAAoB,IAAI,GAC7C,QAAuB,IAAnB,EACA,KAAM,yBAAA,OAAyB,EAAa,cAGhD,IAAI,EAAW,EAAc,GAAG,MAAM,aAAa,QAC/C,EAAc,SAAA,GAAQ,EAAe,OACzC,iCAAiC,EAAgB,EAAU,GAC3D,EAAQ,GAAY,SA5BhB,EAAe,yBACX,EACA,EAAQ,GACR,GA4BZ,OAAO,EAGX,SAAS,mBACL,EACA,GAIA,EAAe,kBAAkB,EAAS,GAI1C,IAAI,EAAgB,SAAS,cAAc,OAO3C,IAAK,IAAI,KANT,SAAS,KAAK,YAAY,GAC1B,EAAc,GAAK,wBACnB,EAAc,MAAM,QAAU,OAIT,EAAS,CAC1B,IAAI,EAAa,EAAQ,GACrB,EAAY,aAAA,OAAa,GAI7B,KAHI,EAAU,SAAS,eAAe,IAGtC,CAKA,IAAM,EAAc,cAAc,EAAW,QAG7C,IAAK,EACD,KAAM,oCAAA,OAAoC,EAAW,SAOzD,GAHI,EAAuB,IAAI,EAAY,EAAW,IAGnC,iBACX,GAAK,EACb,EAAQ,UAAU,IAAI,iBAGtB,EAAQ,aAAa,eAAgB,EAAW,eAGhD,IAAI,EAAM,EAAgB,SACd,IAAR,GACA,EAAQ,aAAa,UAAW,GAAA,OAAG,IAIvC,oBAAoB,IAAI,EAAS,GAGjC,EAAc,YAAY,IAI9B,IAAI,EAA6B,IAAI,IAErC,IAAK,IAAI,KAAM,EAAS,CACpB,IACI,EAMA,EAPA,EAAa,EAAQ,GAIzB,aAHI,EAAU,qBAAqB,GAGb,IAGlB,EAAW,oBAAoB,IAAI,IAC9B,cAAc,EAAS,GAGhC,EAAS,MAAK,SAAA,SAAA,GACP,EAAS,OACT,GAIP,EAA2B,IAAI,GAE/B,IAAI,EAAgB,wCAAwC,GAC5D,GAAI,EAAe,CACf,IAAI,EAAiB,oBAAoB,IAAI,GAE7C,IAAK,EACD,KAAM,oCAAA,OAAoC,GAG9C,EAA2B,IAAI,IAWvC,GALA,EAA2B,QAAQ,SAAC,GAChC,EAAO,uBAIU,OAAjB,EAAuB,CACvB,IAAI,EAAc,qBAAqB,GACvC,SAAS,KAAK,UAAY,GAC1B,SAAS,KAAK,YAAY,GAI9B,EAAc,SAGlB,SAAS,aAAa,EAAsB,QACnB,IAAjB,EAAM,SACkB,OAApB,EAAM,OAAO,GACb,EAAQ,MAAM,eAAe,aAE7B,EAAQ,MAAM,SAAW,GAAA,OAAG,EAAM,OAAO,GAAE,MAGvB,OAApB,EAAM,OAAO,GACb,EAAQ,MAAM,eAAe,cAE7B,EAAQ,MAAM,UAAY,GAAA,OAAG,EAAM,OAAO,GAAE,OAKxD,SAAgB,iBACZ,EACA,GAGA,QAAgB,IAAZ,EAKJ,GAAgB,OAAZ,EAAJ,CAKA,IAAM,EAAsB,EAAc,kBAI1C,GAA4B,OAAxB,EAA8B,CAG9B,GAAI,EAAoB,KAAO,aAAA,OAAa,GACxC,OAKJ,IAAI,EAAgB,SAAS,eAAe,yBAC5C,MAAA,GAAA,EAAe,YAAY,GAI/B,IAAI,EAAa,qBAAqB,GACtC,MAAA,GAAA,EAAe,YAAY,QAvBvB,EAAc,UAAY,GA0BlC,SAAgB,gBACZ,EACA,GAGA,QAAiB,IAAb,EAQJ,IALA,IAAI,EAAgB,SAAS,eAAe,yBAExC,EAAa,EAAc,kBAC3B,EAAa,IAEJ,CAGT,GAAmB,OAAf,EAAqB,CACrB,KAAO,EAAa,EAAS,QAAQ,CACjC,IACI,EAAa,qBADL,EAAS,IAErB,EAAc,YAAY,GAC1B,IAEJ,MAKJ,GAAI,GAAc,EAAS,OAAQ,CAC/B,KAAsB,OAAf,GAAqB,CACxB,IAAI,EAAc,EAAW,mBAC7B,EAAc,YAAY,GAC1B,EAAa,EAEjB,MAIJ,IAAI,EAAQ,EAAS,GACrB,GAAI,EAAW,KAAO,aAAA,OAAa,GAAnC,CAQA,IAAI,EAAa,qBAAqB,GACtC,EAAc,aAAa,EAAa,GACxC,SATI,EAAa,EAAW,mBACxB,KAYZ,SAAS,kBAAkB,GAEvB,IAAI,EAAQ,SAAS,cAAc,SAUnC,SAAS,IAEL,GAA4B,OAAxB,EAAM,cAAV,CAQA,IAHA,IAAM,EAAO,IAAI,SAGE,EAAA,EAAA,EAAA,EAAM,OAAS,GAAf,EAAA,EAAA,OAAA,IAAmB,CAAjC,IAAM,EAAI,EAAA,GACL,EACN,EAAK,OAAO,aAAc,EAAK,MAC/B,EAAK,OAAO,aAAc,EAAK,MAC/B,EAAK,OAAO,aAAc,EAAK,KAAK,YACpC,EAAK,OAAO,eAAgB,EAAM,EAAK,MAK3C,EAAK,OAAO,QAAS,SAGrB,MAAM,EAAQ,UAAW,CACrB,OAAQ,MACR,KAAM,IAKV,EAAM,UAvCV,EAAM,KAAO,OACb,EAAM,SAAW,EAAQ,SAEM,OAA3B,EAAQ,iBACR,EAAM,OAAS,EAAQ,eAAe,KAAK,MAG/C,EAAM,MAAM,QAAU,OAoCtB,EAAM,iBAAiB,SAAU,GAIjC,OAAO,iBACH,QACA,WAGI,KAAK,OAAO,WAAW,EAAQ,MAEnC,CAAE,MAAM,IAIZ,SAAS,KAAK,YAAY,GAG1B,EAAM,QAGV,SAAS,OAEL,IAAI,EAAU,SAAS,cAAc,OACrC,EAAQ,MAAM,OAAS,OACvB,SAAS,KAAK,YAAY,GAC1B,QAAA,YAAc,EAAQ,aAAe,GACrC,SAAS,KAAK,YAAY,GAG1B,IAAI,EAAM,IAAI,IACV,2BAAA,OAA2B,cAC3B,OAAO,SAAS,MAEpB,EAAI,SAAW,EAAI,SAAS,QAAQ,OAAQ,MAC5C,QAAQ,IAAI,2BAAA,OAA2B,EAAI,QAC3C,OAAS,IAAI,UAAU,EAAI,OAEpB,iBAAiB,OAAQ,QAChC,OAAO,iBAAiB,UAAW,WACnC,OAAO,iBAAiB,QAAS,SACjC,OAAO,iBAAiB,QAAS,SAMjC,YAAY,WACR,yBAAyB,CACrB,QAAS,MACT,OAAQ,OACR,OAAQ,CAAC,QACT,GAAI,QAAA,OAAQ,KAAK,UAEtB,KAGP,SAAS,SACL,QAAQ,IAAI,qBAGZ,IAAI,EAAe,GACnB,IAAK,IAAI,KAAO,aACZ,GAAK,EAAI,WAAW,uBAIpB,IACI,EAAa,EAAI,MAAM,sBAAsB,SAAW,KAAK,MACzD,aAAa,IAEnB,MAAO,GACL,QAAQ,IAAI,gCAAA,OAAgC,EAAG,MAAA,OAAK,IAI5D,yBAAyB,CACrB,aAAc,IAItB,SAAS,UAAU,GAKf,eAHc,KAAK,MAAM,EAAM,OAMnC,SAAS,QAAQ,GACb,QAAQ,IAAI,UAAA,OAAU,EAAM,UAGhC,SAAS,QAAQ,GACb,QAAQ,IAAI,sBAAA,OAAsB,EAAM,SAG5C,SAAgB,yBAAyB,GAChC,QAOL,QAAQ,IAAI,oBAAqB,GAEjC,OAAO,KAAK,KAAK,UAAU,KARvB,QAAQ,IACJ,kEAAA,OAAkE,IAU9E,SAAgB,gCACZ,EACA,GAEA,yBAAyB,CACrB,QAAS,MACT,OAAQ,EACR,OAAQ,IAhmBhB,WAAW,cAAgB,cAmW3B,QAAA,iBAAA,iBAqCA,QAAA,gBAAA,gBAoMA,QAAA,yBAAA,yBAaA,QAAA,gCAAA,gCAWA","file":"app.js","sourceRoot":"../../frontend","sourcesContent":["import { callRemoteMethodDiscardResponse } from './app';\n\n/// Base for all widget states. Updates received from the backend are partial,\n/// hence most properties may be undefined.\nexport type WidgetState = {\n    _type_?: string;\n    _python_type_?: string;\n    _key_?: string;\n    _margin_?: [number, number, number, number];\n    _size_?: [number | null, number | null];\n    _align_?: [number | null, number | null];\n    _grow_?: [boolean, boolean];\n};\n\n/// Base class for all widgets\nexport abstract class WidgetBase {\n    elementId: string;\n    state: object;\n    layoutCssProperties: object;\n\n    constructor(elementId: string, state: WidgetState) {\n        this.elementId = elementId;\n        this.state = state;\n        this.layoutCssProperties = {};\n    }\n\n    /// Fetches the HTML element associated with this widget. This is a slow\n    /// operation and should be avoided if possible.\n    get element(): HTMLElement {\n        let element = document.getElementById(this.elementId);\n\n        if (element === null) {\n            throw new Error(\n                `Instance for element with id ${this.elementId} cannot find its element`\n            );\n        }\n\n        return element;\n    }\n\n    /// Creates the HTML element associated with this widget. This function does\n    /// not attach the element to the DOM, but merely returns it.\n    abstract createElement(): HTMLElement;\n\n    /// Given a partial state update, this function updates the widget's HTML\n    /// element to reflect the new state.\n    ///\n    /// The `element` parameter is identical to `this.element`. Calling that\n    /// property is slow however, so it is passed as argument here, to avoid\n    /// accidentally calling the property multiple times.\n    abstract updateElement(element: HTMLElement, deltaState: WidgetState): void;\n\n    /// Update the layout relevant CSS attributes for all of the widget's\n    /// children.\n    updateChildLayouts(): void {}\n\n    /// Used by the parent for assigning the layout relevant CSS attributes to\n    /// the widget's HTML element. This function keeps track of the assigned\n    /// properties, allowing it to remove properties which are no longer\n    /// relevant.\n    replaceLayoutCssProperties(cssProperties: object): void {\n        // Find all properties which are no longer present and remove them\n        for (let key in this.layoutCssProperties) {\n            if (!(key in cssProperties)) {\n                this.element.style.removeProperty(key);\n            }\n        }\n\n        // Set all properties which are new or changed\n        for (let key in cssProperties) {\n            this.element.style.setProperty(key, cssProperties[key]);\n        }\n\n        // Keep track of the new properties\n        this.layoutCssProperties = cssProperties;\n    }\n\n    /// Send a message to the python instance corresponding to this widget. The\n    /// message is an arbitrary JSON object and will be passed to the instance's\n    /// `_on_message` method.\n    sendMessageToBackend(message: object): void {\n        callRemoteMethodDiscardResponse('widgetMessage', {\n            // Remove the leading `reflex-id-` from the element's ID\n            widgetId: parseInt(this.elementId.substring(10)),\n            payload: message,\n        });\n    }\n\n    _setStateDontNotifyBackend(deltaState: object): void {\n        // Set the state\n        this.state = {\n            ...this.state,\n            ...deltaState,\n        };\n\n        // Trigger an update\n        // @ts-ignore\n        this.updateElement(this.element, deltaState);\n    }\n\n    setStateAndNotifyBackend(deltaState: object): void {\n        // Set the state. This also updates the widget\n        this._setStateDontNotifyBackend(deltaState);\n\n        // Notify the backend\n        callRemoteMethodDiscardResponse('widgetStateUpdate', {\n            // Remove the leading `reflex-id-` from the element's ID\n            widgetId: parseInt(this.elementId.substring(10)),\n            deltaState: deltaState,\n        });\n    }\n}\n\nglobalThis.WidgetBase = WidgetBase;\n","import { TextStyle } from './models';\nimport { colorToCss } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type TextState = WidgetState & {\n    text?: string;\n    multiline?: boolean;\n    style?: TextStyle;\n};\n\nexport class TextWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let containerElement = document.createElement('div');\n        containerElement.classList.add('reflex-text');\n\n        let textElement = document.createElement('div');\n        containerElement.appendChild(textElement);\n        return containerElement;\n    }\n\n    updateElement(containerElement: HTMLElement, deltaState: TextState): void {\n        let textElement = containerElement.firstElementChild as HTMLElement;\n\n        if (deltaState.text !== undefined) {\n            textElement.innerText = deltaState.text;\n        }\n\n        if (deltaState.multiline !== undefined) {\n            textElement.style.whiteSpace = deltaState.multiline\n                ? 'normal'\n                : 'nowrap';\n        }\n\n        if (deltaState.style !== undefined) {\n            const style = deltaState.style;\n            textElement.style.fontFamily = style.fontName;\n            textElement.style.color = colorToCss(style.fontColor);\n            textElement.style.fontSize = style.fontSize + 'em';\n            textElement.style.fontStyle = style.italic ? 'italic' : 'normal';\n            textElement.style.fontWeight = style.fontWeight;\n            textElement.style.textDecoration = style.underlined\n                ? 'underline'\n                : 'none';\n            textElement.style.textTransform = style.allCaps\n                ? 'uppercase'\n                : 'none';\n        }\n    }\n}\n","import { getInstanceByWidgetId, replaceChildren } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type RowState = WidgetState & {\n    _type_: 'row';\n    children?: (number | string)[];\n    spacing?: number;\n};\n\nexport class RowWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-row');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: RowState): void {\n        replaceChildren(element, deltaState.children);\n\n        if (deltaState.spacing !== undefined) {\n            element.style.gap = `${deltaState.spacing}em`;\n        }\n    }\n\n    updateChildLayouts(): void {\n        let children: WidgetBase[] = [];\n        let anyGrowers = false;\n\n        for (let childId of this.state['children']) {\n            let child = getInstanceByWidgetId(childId);\n            children.push(child);\n            anyGrowers = anyGrowers || child.state['_grow_'][0];\n        }\n\n        for (let child of children) {\n            child.replaceLayoutCssProperties({\n                'flex-grow':\n                    !anyGrowers || child.state['_grow_'][0] ? '1' : '0',\n            });\n        }\n    }\n}\n","import { getInstanceByWidgetId, replaceChildren } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\ntype ColumnState = WidgetState & {\n    _type_: 'column';\n    children?: (number | string)[];\n    spacing?: number;\n};\n\nexport class ColumnWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-column');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: ColumnState): void {\n        replaceChildren(element, deltaState.children);\n\n        if (deltaState.spacing !== undefined) {\n            element.style.gap = `${deltaState.spacing}em`;\n        }\n    }\n\n    updateChildLayouts(): void {\n        let children: WidgetBase[] = [];\n        let anyGrowers = false;\n\n        for (let childId of this.state['children']) {\n            let child = getInstanceByWidgetId(childId);\n            children.push(child);\n            anyGrowers = anyGrowers || child.state['_grow_'][1];\n        }\n\n        for (let child of children) {\n            child.replaceLayoutCssProperties({\n                'flex-grow':\n                    !anyGrowers || child.state['_grow_'][1] ? '1' : '0',\n            });\n        }\n    }\n}\n","import { WidgetBase, WidgetState } from './widgetBase';\n\nexport type DropdownState = WidgetState & {\n    _type_: 'dropdown';\n    optionNames?: string[];\n    selectedName?: string;\n};\n\nexport class DropdownWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('select');\n        element.classList.add('reflex-dropdown');\n\n        element.addEventListener('input', () => {\n            this.sendMessageToBackend({\n                name: element.value,\n            });\n        });\n\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: DropdownState): void {\n        if (deltaState.optionNames !== undefined) {\n            element.innerHTML = '';\n\n            for (let optionName of deltaState.optionNames) {\n                let option = document.createElement('option');\n                option.value = optionName;\n                option.text = optionName;\n                element.appendChild(option);\n            }\n        }\n\n        if (deltaState.selectedName !== undefined) {\n            if (deltaState.selectedName === null) {\n                (element as HTMLSelectElement).selectedIndex = -1;\n            } else {\n                (element as HTMLSelectElement).value = deltaState.selectedName;\n            }\n        }\n    }\n}\n","import {\n    colorToCss,\n    fillToCss,\n    getInstanceByWidgetId,\n    replaceOnlyChild,\n} from './app';\nimport { BoxStyle } from './models';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type RectangleState = WidgetState & {\n    _type_: 'Rectangle-builtin';\n    style?: BoxStyle;\n    child?: null | number | string;\n    hover_style?: BoxStyle | null;\n    transition_time?: number;\n    cursor?: string;\n};\n\nfunction setBoxStyleVariables(\n    element: HTMLElement,\n    style: BoxStyle | undefined,\n    prefix: string,\n    suffix: string\n): void {\n    // Do nothing if no style was passed\n    if (style === undefined) {\n        return;\n    }\n\n    // Define a set of CSS variables which should be set. For now without the\n    // prefix\n    let variables: object = {};\n\n    if (style === null) {\n        variables = {\n            background: 'transparent',\n\n            'stroke-color': 'transparent',\n            'stroke-width': '0em',\n\n            'corner-radius-top-left': '0em',\n            'corner-radius-top-right': '0em',\n            'corner-radius-bottom-right': '0em',\n            'corner-radius-bottom-left': '0em',\n\n            'shadow-color': 'transparent',\n            'shadow-radius': '0em',\n            'shadow-offset-x': '0em',\n            'shadow-offset-y': '0em',\n        };\n    } else {\n        variables['background'] = fillToCss(style.fill);\n\n        variables['stroke-color'] = colorToCss(style.strokeColor);\n        variables['stroke-width'] = `${style.strokeWidth}em`;\n\n        variables['corner-radius-top-left'] = `${style.cornerRadius[0]}em`;\n        variables['corner-radius-top-right'] = `${style.cornerRadius[1]}em`;\n        variables['corner-radius-bottom-right'] = `${style.cornerRadius[2]}em`;\n        variables['corner-radius-bottom-left'] = `${style.cornerRadius[3]}em`;\n\n        variables['shadow-color'] = colorToCss(style.shadowColor);\n        variables['shadow-radius'] = `${style.shadowRadius}em`;\n        variables['shadow-offset-x'] = `${style.shadowOffset[0]}em`;\n        variables['shadow-offset-y'] = `${style.shadowOffset[1]}em`;\n    }\n\n    // Set the variables and add the prefix\n    for (const [key, value] of Object.entries(variables)) {\n        element.style.setProperty(`--${prefix}${key}${suffix}`, value);\n    }\n}\n\nexport class RectangleWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-rectangle');\n        element.classList.add('reflex-single-container');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: RectangleState): void {\n        replaceOnlyChild(element, deltaState.child);\n\n        setBoxStyleVariables(element, deltaState.style, 'rectangle-', '');\n\n        if (deltaState.transition_time !== undefined) {\n            element.style.transitionDuration = `${deltaState.transition_time}s`;\n        }\n\n        if (deltaState.hover_style === null) {\n            element.classList.remove('reflex-rectangle-hover');\n        } else if (deltaState.hover_style !== undefined) {\n            element.classList.add('reflex-rectangle-hover');\n            setBoxStyleVariables(\n                element,\n                deltaState.hover_style,\n                'rectangle-',\n                '-hover'\n            );\n        }\n\n        if (deltaState.cursor !== undefined) {\n            if (deltaState.cursor === 'default') {\n                element.style.removeProperty('cursor');\n            } else {\n                element.style.cursor = deltaState.cursor;\n            }\n        }\n    }\n\n    updateChildLayouts(): void {\n        let child = this.state['child'];\n\n        if (child !== undefined && child !== null) {\n            getInstanceByWidgetId(child).replaceLayoutCssProperties({});\n        }\n    }\n}\n","import { replaceChildren } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type StackState = WidgetState & {\n    _type_: 'stack';\n    children?: number[];\n};\n\nexport class StackWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-stack');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: StackState): void {\n        if (deltaState.children !== undefined) {\n            replaceChildren(element, deltaState.children);\n\n            let zIndex = 0;\n            for (let child of element.children) {\n                (child as HTMLElement).style.zIndex = `${zIndex}`;\n                zIndex += 1;\n            }\n        }\n    }\n}\n","import { getInstanceByWidgetId, pixelsPerEm, replaceOnlyChild } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nfunction eventMouseButtonToString(event: MouseEvent): object {\n    return {\n        button: ['left', 'middle', 'right'][event.button],\n    };\n}\n\nfunction eventMousePositionToString(event: MouseEvent): object {\n    return {\n        x: event.clientX / pixelsPerEm,\n        y: event.clientY / pixelsPerEm,\n    };\n}\n\nexport type MouseEventListenerState = WidgetState & {\n    _type_: 'mouseEventListener';\n    child?: number | string;\n    reportMouseDown?: boolean;\n    reportMouseUp?: boolean;\n    reportMouseMove?: boolean;\n    reportMouseEnter?: boolean;\n    reportMouseLeave?: boolean;\n};\n\nexport class MouseEventListenerWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-single-container');\n        return element;\n    }\n\n    updateElement(\n        element: HTMLElement,\n        deltaState: MouseEventListenerState\n    ): void {\n        replaceOnlyChild(element, deltaState.child);\n\n        if (deltaState.reportMouseDown) {\n            element.onmousedown = (e) => {\n                this.sendMessageToBackend({\n                    type: 'mouseDown',\n                    ...eventMouseButtonToString(e),\n                    ...eventMousePositionToString(e),\n                });\n            };\n        } else {\n            element.onmousedown = null;\n        }\n\n        if (deltaState.reportMouseUp) {\n            element.onmouseup = (e) => {\n                this.sendMessageToBackend({\n                    type: 'mouseUp',\n                    ...eventMouseButtonToString(e),\n                    ...eventMousePositionToString(e),\n                });\n            };\n        } else {\n            element.onmouseup = null;\n        }\n\n        if (deltaState.reportMouseMove) {\n            element.onmousemove = (e) => {\n                this.sendMessageToBackend({\n                    type: 'mouseMove',\n                    ...eventMousePositionToString(e),\n                });\n            };\n        } else {\n            element.onmousemove = null;\n        }\n\n        if (deltaState.reportMouseEnter) {\n            element.onmouseenter = (e) => {\n                this.sendMessageToBackend({\n                    type: 'mouseEnter',\n                    ...eventMousePositionToString(e),\n                });\n            };\n        } else {\n            element.onmouseenter = null;\n        }\n\n        if (deltaState.reportMouseLeave) {\n            element.onmouseleave = (e) => {\n                this.sendMessageToBackend({\n                    type: 'mouseLeave',\n                    ...eventMousePositionToString(e),\n                });\n            };\n        } else {\n            element.onmouseleave = null;\n        }\n    }\n\n    updateChildLayouts(): void {\n        getInstanceByWidgetId(this.state['child']).replaceLayoutCssProperties(\n            {}\n        );\n    }\n}\n","import { WidgetBase, WidgetState } from './widgetBase';\n\nexport type TextInputState = WidgetState & {\n    _type_: 'textInput';\n    text?: string;\n    placeholder?: string;\n    secret?: boolean;\n};\n\nexport class TextInputWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('input');\n        element.classList.add('reflex-text-input');\n\n        // Detect value changes and send them to the backend\n        element.addEventListener('blur', () => {\n            this.setStateAndNotifyBackend({\n                text: element.value,\n            });\n        });\n\n        // Detect the enter key and send it to the backend\n        //\n        // In addition to notifying the backend, also include the input's\n        // current value. This ensures any event handlers actually use the up-to\n        // date value.\n        element.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter') {\n                this.sendMessageToBackend({\n                    text: element.value,\n                });\n            }\n        });\n\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: TextInputState): void {\n        let cast_element = element as HTMLInputElement;\n\n        if (deltaState.secret !== undefined) {\n            cast_element.type = deltaState.secret ? 'password' : 'text';\n        }\n\n        if (deltaState.text !== undefined) {\n            cast_element.value = deltaState.text;\n        }\n\n        if (deltaState.placeholder !== undefined) {\n            cast_element.placeholder = deltaState.placeholder;\n        }\n    }\n}\n","import { getInstanceByWidgetId, replaceOnlyChild } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type PlaceholderState = WidgetState & {\n    _type_: 'Placeholder';\n    _child_?: number | string;\n};\n\nexport class PlaceholderWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-single-container');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: PlaceholderState): void {\n        replaceOnlyChild(element, deltaState._child_);\n    }\n\n    updateChildLayouts(): void {\n        getInstanceByWidgetId(this.state['_child_']).replaceLayoutCssProperties(\n            {}\n        );\n    }\n}\n","import { colorToCss } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type SwitchState = WidgetState & {\n    _type_: 'switch';\n    is_on?: boolean;\n    knobColorOn?: [number, number, number, number];\n    knobColorOff?: [number, number, number, number];\n    backgroundColorOn?: [number, number, number, number];\n    backgroundColorOff?: [number, number, number, number];\n};\n\nexport class SwitchWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-switch');\n\n        let containerElement = document.createElement('div');\n        containerElement.classList.add('container');\n        element.appendChild(containerElement);\n\n        let checkboxElement = document.createElement('input');\n        checkboxElement.type = 'checkbox';\n        containerElement.appendChild(checkboxElement);\n\n        let knobElement = document.createElement('div');\n        knobElement.classList.add('knob');\n        containerElement.appendChild(knobElement);\n\n        checkboxElement.addEventListener('change', () => {\n            this.setStateAndNotifyBackend({\n                is_on: checkboxElement.checked,\n            });\n        });\n\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: SwitchState): void {\n        if (deltaState.is_on !== undefined) {\n            if (deltaState.is_on) {\n                element.classList.add('is-on');\n            } else {\n                element.classList.remove('is-on');\n            }\n\n            // Assign the new value to the checkbox element, but only if it\n            // differs from the current value, to avoid immediately triggering\n            // the event again.\n            let checkboxElement = element.querySelector('input');\n            if (checkboxElement?.checked !== deltaState.is_on) {\n                checkboxElement!.checked = deltaState.is_on;\n            }\n        }\n\n        if (deltaState.knobColorOff !== undefined) {\n            element.style.setProperty(\n                '--switch-knob-color-off',\n                colorToCss(deltaState.knobColorOff)\n            );\n        }\n\n        if (deltaState.knobColorOn !== undefined) {\n            element.style.setProperty(\n                '--switch-knob-color-on',\n                colorToCss(deltaState.knobColorOn)\n            );\n        }\n\n        if (deltaState.backgroundColorOff !== undefined) {\n            element.style.setProperty(\n                '--switch-background-color-off',\n                colorToCss(deltaState.backgroundColorOff)\n            );\n        }\n\n        if (deltaState.backgroundColorOn !== undefined) {\n            element.style.setProperty(\n                '--switch-background-color-on',\n                colorToCss(deltaState.backgroundColorOn)\n            );\n        }\n    }\n}\n","import { colorToCss } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type ProgressCircleState = WidgetState & {\n    _type_: 'progressCircle';\n    color?: [number, number, number, number];\n    background_color?: [number, number, number, number];\n    progress?: number | null;\n};\n\nexport class ProgressCircleWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.innerHTML = `\n            <svg viewBox=\"25 25 50 50\">\n                <circle class=\"background\" cx=\"50\" cy=\"50\" r=\"20\"></circle>\n                <circle class=\"progress\" cx=\"50\" cy=\"50\" r=\"20\"></circle>\n            </svg>\n        `;\n        element.classList.add('reflex-progress-circle');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: ProgressCircleState): void {\n        if (deltaState.color !== undefined) {\n            element.style.stroke = colorToCss(deltaState.color);\n        }\n\n        if (deltaState.background_color !== undefined) {\n            element.style.setProperty(\n                '--background-color',\n                colorToCss(deltaState.background_color)\n            );\n        }\n\n        if (deltaState.progress !== undefined) {\n            if (deltaState.progress === null) {\n                element.classList.add('spinning');\n            } else {\n                element.classList.remove('spinning');\n\n                let fullCircle = 40 * Math.PI;\n                element.style.setProperty(\n                    '--dasharray',\n                    `${deltaState.progress * fullCircle}, ${\n                        (1 - deltaState.progress) * fullCircle\n                    }`\n                );\n            }\n        }\n    }\n}\n","import { fillToCss } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\ntype PlotState = WidgetState & {\n    _type_: 'plot';\n    plotJson: string;\n    boxStyle: object;\n};\n\nfunction loadPlotly(callback) {\n    if (typeof Plotly === 'undefined') {\n        console.log('Fetching plotly.js');\n        let script = document.createElement('script');\n        script.src = '/reflex/asset/plotly.min.js';\n        script.onload = callback;\n        document.head.appendChild(script);\n    } else {\n        callback();\n    }\n}\n\nfunction applyStyle(element: HTMLElement, style: any) {\n    // Fill\n    element.style.background = fillToCss(style.fill);\n\n    // Corner radius\n    element.style.borderRadius = `${style.cornerRadius[0]}em ${style.cornerRadius[1]}em ${style.cornerRadius[2]}em ${style.cornerRadius[3]}em`;\n\n    // The remaining values are currently not supported.\n}\n\nexport class PlotWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.style.display = 'inline-block';\n\n        // Force the corner radius to be applied to plotly\n        element.style.overflow = 'hidden';\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: PlotState): void {\n        element.innerHTML = '';\n        loadPlotly(() => {\n            let plotJson = JSON.parse(deltaState.plotJson);\n            Plotly.newPlot(element, plotJson.data, plotJson.layout, {\n                responsive: true,\n            });\n\n            applyStyle(element, deltaState.boxStyle);\n        });\n    }\n}\n","import { getInstanceByWidgetId, replaceOnlyChild } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type AlignState = WidgetState & {\n    _type_: 'Align-builtin';\n    child?: number | string;\n    align_x?: number | null;\n    align_y?: number | null;\n};\n\nexport class AlignWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-align');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: AlignState): void {\n        replaceOnlyChild(element, deltaState.child);\n    }\n\n    updateChildLayouts(): void {\n        // Prepare the list of CSS properties to apply to the child\n        let align_x: number = this.state['align_x']!;\n        let align_y: number = this.state['align_y']!;\n\n        let cssProperties = {};\n\n        let transform_x;\n        if (align_x === null) {\n            cssProperties['width'] = '100%';\n            transform_x = 0;\n        } else {\n            cssProperties['width'] = 'max-content';\n            cssProperties['left'] = `${align_x * 100}%`;\n            transform_x = align_x * -100;\n        }\n\n        let transform_y;\n        if (align_y === null) {\n            cssProperties['height'] = '100%';\n            transform_y = 0;\n        } else {\n            cssProperties['height'] = 'max-content';\n            cssProperties['top'] = `${align_y * 100}%`;\n            transform_y = align_y * -100;\n        }\n\n        if (transform_x !== 0 || transform_y !== 0) {\n            cssProperties[\n                'transform'\n            ] = `translate(${transform_x}%, ${transform_y}%)`;\n        }\n\n        // Apply the CSS properties to the child\n        getInstanceByWidgetId(this.state['child']).replaceLayoutCssProperties(\n            cssProperties\n        );\n    }\n}\n","import { getInstanceByWidgetId, replaceOnlyChild } from './app';\nimport { WidgetBase, WidgetState } from './widgetBase';\n\nexport type MarginState = WidgetState & {\n    _type_: 'Margin-builtin';\n    child?: number | string;\n    margin_left?: number;\n    margin_top?: number;\n    margin_right?: number;\n    margin_bottom?: number;\n};\n\nexport class MarginWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('div');\n        element.classList.add('reflex-margin');\n        element.classList.add('reflex-single-container');\n        return element;\n    }\n\n    updateElement(element: HTMLElement, deltaState: MarginState): void {\n        replaceOnlyChild(element, deltaState.child);\n\n        if (deltaState.margin_left !== undefined) {\n            element.style.paddingLeft = `${deltaState.margin_left}em`;\n        }\n\n        if (deltaState.margin_top !== undefined) {\n            element.style.paddingTop = `${deltaState.margin_top}em`;\n        }\n\n        if (deltaState.margin_right !== undefined) {\n            element.style.paddingRight = `${deltaState.margin_right}em`;\n        }\n\n        if (deltaState.margin_bottom !== undefined) {\n            element.style.paddingBottom = `${deltaState.margin_bottom}em`;\n        }\n    }\n\n    updateChildLayouts(): void {\n        // let marginX = this.state['margin_left']! + this.state['margin_right']!;\n        // let marginY = this.state['margin_top']! + this.state['margin_bottom']!;\n\n        // getInstanceByWidgetId(this.state['child']).replaceLayoutCssProperties({\n        //     'margin-left': `${this.state['margin_left']}em`,\n        //     'margin-top': `${this.state['margin_top']}em`,\n        //     'margin-right': `${this.state['margin_right']}em`,\n        //     'margin-bottom': `${this.state['margin_bottom']}em`,\n        //     width: `calc(100% - ${marginX}em)`,\n        //     height: `calc(100% - ${marginY}em)`,\n        // });\n        getInstanceByWidgetId(this.state['child']).replaceLayoutCssProperties(\n            {}\n        );\n    }\n}\n","import { WidgetBase, WidgetState } from './widgetBase';\n\nexport type MediaPlayerState = WidgetState & {\n    _type_: 'mediaPlayer';\n    media?: string;\n    loop?: boolean;\n    autoplay?: boolean;\n    controls?: boolean;\n    muted?: boolean;\n    volume?: number;\n};\n\nexport class MediaPlayerWidget extends WidgetBase {\n    createElement(): HTMLElement {\n        let element = document.createElement('video');\n        return element;\n    }\n\n    updateElement(element: HTMLMediaElement, deltaState: MediaPlayerState): void {\n        if (deltaState.media !== undefined) {\n            element.src = deltaState.media;\n        }\n\n        if (deltaState.loop !== undefined) {\n            element.loop = deltaState.loop;\n        }\n\n        if (deltaState.autoplay !== undefined) {\n            element.autoplay = deltaState.autoplay;\n        }\n\n        if (deltaState.controls !== undefined) {\n            element.controls = deltaState.controls;\n        }\n\n        if (deltaState.muted !== undefined) {\n            element.muted = deltaState.muted;\n        }\n\n        if (deltaState.volume !== undefined) {\n            element.volume = deltaState.volume;\n        }\n    }\n}\n","import { TextWidget } from './text';\nimport { RowWidget } from './row';\nimport { ColumnWidget } from './column';\nimport { DropdownWidget } from './dropdown';\nimport { RectangleWidget } from './rectangle';\nimport { StackWidget } from './stack';\nimport { Color, Fill } from './models';\nimport { MouseEventListenerWidget } from './mouseEventListener';\nimport { TextInputWidget } from './textInput';\nimport { PlaceholderWidget } from './placeholder';\nimport { SwitchWidget } from './switch';\nimport { WidgetBase, WidgetState } from './widgetBase';\nimport { ProgressCircleWidget } from './progressCircle';\nimport { PlotWidget } from './plot';\nimport { AlignWidget } from './align';\nimport { MarginWidget } from './margin';\nimport { MediaPlayerWidget } from './mediaPlayer';\n\nconst sessionToken = '{session_token}';\n\n// @ts-ignore\nconst CHILD_ATTRIBUTE_NAMES: { [id: string]: string[] } =\n    '{child_attribute_names}';\n\nlet socket: WebSocket | null = null;\nexport var pixelsPerEm = 16;\n\nconst elementsToInstances = new WeakMap<HTMLElement, WidgetBase>();\n\nexport function colorToCss(color: Color): string {\n    const [r, g, b, a] = color;\n    return `rgba(${r * 255}, ${g * 255}, ${b * 255}, ${a})`;\n}\n\nexport function fillToCss(fill: Fill): string {\n    // Solid Color\n    if (fill.type === 'solid') {\n        return colorToCss(fill.color);\n    }\n\n    // Linear Gradient\n    if (fill.type === 'linearGradient') {\n        if (fill.stops.length == 1) {\n            return colorToCss(fill.stops[0][0]);\n        }\n\n        let stopStrings: string[] = [];\n        for (let i = 0; i < fill.stops.length; i++) {\n            let color = fill.stops[i][0];\n            let position = fill.stops[i][1];\n            stopStrings.push(`${colorToCss(color)} ${position * 100}%`);\n        }\n\n        return `linear-gradient(${fill.angleDegrees}deg, ${stopStrings.join(\n            ', '\n        )})`;\n    }\n\n    // Image\n    if (fill.type === 'image') {\n        let cssUrl = `url('${fill.imageUrl}')`;\n\n        if (fill.fillMode == 'fit') {\n            return `${cssUrl} center/contain no-repeat`;\n        } else if (fill.fillMode == 'stretch') {\n            return `${cssUrl} top left / 100% 100%`;\n        } else if (fill.fillMode == 'tile') {\n            return `${cssUrl} left top repeat`;\n        } else if (fill.fillMode == 'zoom') {\n            return `${cssUrl} center/cover no-repeat`;\n        } else {\n            // Invalid fill mode\n            // @ts-ignore\n            throw `Invalid fill mode for image fill: ${fill.type}`;\n        }\n    }\n\n    // Invalid fill type\n    // @ts-ignore\n    throw `Invalid fill type: ${fill.type}`;\n}\n\nexport function getElementByWidgetId(id: number | string): HTMLElement {\n    let element = document.getElementById(`reflex-id-${id}`);\n\n    if (element === null) {\n        throw `Could not find widget with id ${id}`;\n    }\n\n    return element;\n}\n\nexport function getInstanceByWidgetId(id: number | string): WidgetBase {\n    let element = getElementByWidgetId(id);\n\n    let instance = elementsToInstances.get(element);\n\n    if (instance === undefined) {\n        throw `Could not find widget with id ${id}`;\n    }\n\n    return instance;\n}\n\nexport function getParentWidgetElementIncludingInjected(\n    element: HTMLElement\n): HTMLElement | null {\n    let curElement = element.parentElement;\n\n    while (curElement !== null) {\n        if (curElement.id.startsWith('reflex-id-')) {\n            return curElement;\n        }\n\n        curElement = curElement.parentElement;\n    }\n\n    return null;\n}\n\nexport function getParentWidgetElementExcludingInjected(\n    element: HTMLElement\n): HTMLElement | null {\n    let curElement: HTMLElement | null = element;\n\n    while (true) {\n        curElement = getParentWidgetElementIncludingInjected(curElement);\n\n        if (curElement === null) {\n            return null;\n        }\n\n        if (curElement.id.match(/reflex-id-\\d+$/)) {\n            return curElement;\n        }\n    }\n}\n\nconst widgetClasses = {\n    'Align-builtin': AlignWidget,\n    'Column-builtin': ColumnWidget,\n    'Dropdown-builtin': DropdownWidget,\n    'Margin-builtin': MarginWidget,\n    'MediaPlayer-builtin': MediaPlayerWidget,\n    'MouseEventListener-builtin': MouseEventListenerWidget,\n    'Plot-builtin': PlotWidget,\n    'ProgressCircle-builtin': ProgressCircleWidget,\n    'Rectangle-builtin': RectangleWidget,\n    'Row-builtin': RowWidget,\n    'Stack-builtin': StackWidget,\n    'Switch-builtin': SwitchWidget,\n    'Text-builtin': TextWidget,\n    'TextInput-builtin': TextInputWidget,\n    Placeholder: PlaceholderWidget,\n};\n\nglobalThis.widgetClasses = widgetClasses;\n\nasync function processMessage(message: any) {\n    console.log('Received message: ', message);\n\n    // If this isn't a method call, ignore it\n    if (message.method === undefined) {\n        return;\n    }\n\n    // Delegate to the appropriate handler\n    let response;\n\n    // New widgets received\n    if (message.method == 'updateWidgetStates') {\n        await updateWidgetStates(\n            message.params.deltaStates,\n            message.params.rootWidgetId\n        );\n        response = null;\n    }\n    // Allow the server to run JavaScript\n    else if (message.method == 'evaluateJavascript') {\n        response = await eval(message.params.javaScriptSource);\n    }\n    // Upload a file to the server\n    else if (message.method == 'requestFileUpload') {\n        await requestFileUpload(message.params);\n        response = null;\n    }\n    // Persistently store user settings\n    else if (message.method == 'setUserSettings') {\n        for (let key in message.params.deltaSettings) {\n            localStorage.setItem(\n                `reflex:userSetting:${key}`,\n                JSON.stringify(message.params.deltaSettings[key])\n            );\n        }\n        response = null;\n    }\n    // Invalid method\n    else {\n        throw `Encountered unknown RPC method: ${message}`;\n    }\n\n    // Respond to the message\n    await sendMessageOverWebsocket({\n        jsonrpc: '2.0',\n        id: message.id,\n        result: response,\n    });\n}\n\nfunction getCurrentWidgetState(\n    id: number | string,\n    deltaState: WidgetState\n): WidgetState {\n    let parentElement = document.getElementById(`reflex-id-${id}`);\n\n    if (parentElement === null) {\n        return deltaState;\n    }\n\n    let parentInstance = elementsToInstances.get(parentElement);\n\n    if (parentInstance === undefined) {\n        return deltaState;\n    }\n\n    return {\n        ...parentInstance.state,\n        ...deltaState,\n    };\n}\n\nfunction createLayoutWidgetStates(\n    widgetId: number | string,\n    deltaState: WidgetState,\n    message: { [id: string]: WidgetState }\n): number | string {\n    let entireState = getCurrentWidgetState(widgetId, deltaState);\n    let resultId = widgetId;\n\n    // Margin\n    let margin = entireState['_margin_']!;\n    if (\n        margin[0] !== 0 ||\n        margin[1] !== 0 ||\n        margin[2] !== 0 ||\n        margin[3] !== 0\n    ) {\n        let marginId = `${widgetId}-margin`;\n        message[marginId] = {\n            _type_: 'Margin-builtin',\n            _python_type_: 'Margin (injected)',\n            _size_: entireState['_size_'],\n            _grow_: entireState['_grow_'],\n            // @ts-ignore\n            child: resultId,\n            margin_left: margin[0],\n            margin_top: margin[1],\n            margin_right: margin[2],\n            margin_bottom: margin[3],\n        };\n        resultId = marginId;\n    }\n\n    // Align\n    let align = entireState['_align_']!;\n    if (align[0] !== null || align[1] !== null) {\n        let alignId = `${widgetId}-align`;\n        message[alignId] = {\n            _type_: 'Align-builtin',\n            _python_type_: 'Align (injected)',\n            _size_: entireState['_size_'],\n            _grow_: entireState['_grow_'],\n            // @ts-ignore\n            child: resultId,\n            align_x: align[0],\n            align_y: align[1],\n        };\n        resultId = alignId;\n    }\n\n    return resultId;\n}\n\nfunction replaceChildrenWithLayoutWidgets(\n    deltaState: WidgetState,\n    childIds: Set<string>,\n    message: { [id: string]: WidgetState }\n): void {\n    let propertyNamesWithChildren =\n        CHILD_ATTRIBUTE_NAMES[deltaState['_type_']!] || [];\n\n    function cleanId(id: string): string {\n        return id.split('-')[0];\n    }\n\n    for (let propertyName of propertyNamesWithChildren) {\n        let propertyValue = deltaState[propertyName];\n\n        if (Array.isArray(propertyValue)) {\n            deltaState[propertyName] = propertyValue.map((childId) => {\n                childId = cleanId(childId.toString());\n                childIds.add(childId);\n                return createLayoutWidgetStates(\n                    childId,\n                    message[childId] || {},\n                    message\n                );\n            });\n        } else if (propertyValue !== null) {\n            let childId = cleanId(propertyValue.toString());\n            deltaState[propertyName] = createLayoutWidgetStates(\n                childId,\n                message[childId] || {},\n                message\n            );\n            childIds.add(childId);\n        }\n    }\n}\n\nfunction preprocessMessage(\n    message: { [id: string]: WidgetState },\n    rootWidgetId: string | number | null\n): string | number | null {\n    // Make sure the rootWidgetId is not a number, but a string. This ensures\n    // that there are no false negatives when compared to an id in the message.\n    if (typeof rootWidgetId === 'number') {\n        rootWidgetId = rootWidgetId.toString();\n    }\n\n    let originalWidgetIds = Object.keys(message);\n\n    // Keep track of which widgets have their parents in the message\n    let childIds: Set<string> = new Set();\n\n    // Walk over all widgets in the message and inject layout widgets. The\n    // message is modified in-place, so take care to have a copy of all keys\n    for (let widgetId of originalWidgetIds) {\n        replaceChildrenWithLayoutWidgets(message[widgetId], childIds, message);\n    }\n\n    // Find all widgets which have had a layout widget injected, and make sure\n    // their parents are updated to point to the new widget.\n    for (let widgetId of originalWidgetIds) {\n        // Child of another widget in the message\n        if (childIds.has(widgetId)) {\n            continue;\n        }\n\n        if (widgetId === rootWidgetId) {\n            rootWidgetId = createLayoutWidgetStates(\n                widgetId,\n                message[widgetId],\n                message\n            );\n            continue;\n        }\n\n        // The parent isn't contained in the message. Find and add it.\n        let childElement = document.getElementById(`reflex-id-${widgetId}`);\n        if (childElement === null) {\n            continue;\n        }\n\n        let parentElement =\n            getParentWidgetElementExcludingInjected(childElement);\n        if (parentElement === null) {\n            continue;\n        }\n\n        let parentInstance = elementsToInstances.get(parentElement);\n        if (parentInstance === undefined) {\n            throw `Parent widget with id ${parentElement} not found`;\n        }\n\n        let parentId = parentElement.id.slice('reflex-id-'.length);\n        let newParentState = { ...parentInstance.state };\n        replaceChildrenWithLayoutWidgets(newParentState, childIds, message);\n        message[parentId] = newParentState;\n    }\n\n    return rootWidgetId;\n}\n\nfunction updateWidgetStates(\n    message: { [id: string]: WidgetState },\n    rootWidgetId: string | number | null\n): void {\n    // Preprocess the message. This converts `_align_` and `_margin_` properties\n    // into actual widgets, amongst other things.\n    rootWidgetId = preprocessMessage(message, rootWidgetId);\n\n    // Create a HTML element to hold all latent widgets, so they aren't\n    // garbage collected while updating the DOM.\n    let latentWidgets = document.createElement('div');\n    document.body.appendChild(latentWidgets);\n    latentWidgets.id = 'reflex-latent-widgets';\n    latentWidgets.style.display = 'none';\n\n    // Make sure all widgets mentioned in the message have a corresponding HTML\n    // element\n    for (let widgetId in message) {\n        let deltaState = message[widgetId];\n        let elementId = `reflex-id-${widgetId}`;\n        let element = document.getElementById(elementId);\n\n        // This is a reused element, no need to instantiate a new one\n        if (element) {\n            continue;\n        }\n\n        // Get the class for this widget\n        const widgetClass = widgetClasses[deltaState._type_!];\n\n        // Make sure the widget type is valid (Just helpful for debugging)\n        if (!widgetClass) {\n            throw `Encountered unknown widget type: ${deltaState._type_}`;\n        }\n\n        // Create an instance for this widget\n        let instance: WidgetBase = new widgetClass(elementId, deltaState);\n\n        // Build the widget\n        element = instance.createElement();\n        element.id = elementId;\n        element.classList.add('reflex-widget');\n\n        // Store the widget's class name in the element. Used for debugging.\n        element.setAttribute('dbg-py-class', deltaState._python_type_!);\n\n        // Set the widget's key, if it has one. Used for debugging.\n        let key = deltaState['key'];\n        if (key !== undefined) {\n            element.setAttribute('dbg-key', `${key}`);\n        }\n\n        // Create a mapping from the element to the widget instance\n        elementsToInstances.set(element, instance);\n\n        // Keep the widget alive\n        latentWidgets.appendChild(element);\n    }\n\n    // Update all widgets mentioned in the message\n    let widgetsNeedingLayoutUpdate = new Set<WidgetBase>();\n\n    for (let id in message) {\n        let deltaState = message[id];\n        let element = getElementByWidgetId(id);\n\n        // Perform updates common to all widgets\n        commonUpdate(element, deltaState);\n\n        // Perform updates specific to this widget type\n        let instance = elementsToInstances.get(element!) as WidgetBase;\n        instance.updateElement(element, deltaState);\n\n        // Update the widget's state\n        instance.state = {\n            ...instance.state,\n            ...deltaState,\n        };\n\n        // Queue the widget and its parent for a layout update\n        widgetsNeedingLayoutUpdate.add(instance);\n\n        let parentElement = getParentWidgetElementIncludingInjected(element!);\n        if (parentElement) {\n            let parentInstance = elementsToInstances.get(parentElement);\n\n            if (!parentInstance) {\n                throw `Failed to find parent widget for ${id}`;\n            }\n\n            widgetsNeedingLayoutUpdate.add(parentInstance);\n        }\n    }\n\n    // Widgets that have changed, or had their parents changed need to have\n    // their layout updated\n    widgetsNeedingLayoutUpdate.forEach((widget) => {\n        widget.updateChildLayouts();\n    });\n\n    // Replace the root widget if requested\n    if (rootWidgetId !== null) {\n        let rootElement = getElementByWidgetId(rootWidgetId);\n        document.body.innerHTML = '';\n        document.body.appendChild(rootElement!);\n    }\n\n    // Remove the latent widgets\n    latentWidgets.remove();\n}\n\nfunction commonUpdate(element: HTMLElement, state: WidgetState) {\n    if (state._size_ !== undefined) {\n        if (state._size_[0] === null) {\n            element.style.removeProperty('min-width');\n        } else {\n            element.style.minWidth = `${state._size_[0]}em`;\n        }\n\n        if (state._size_[1] === null) {\n            element.style.removeProperty('min-height');\n        } else {\n            element.style.minHeight = `${state._size_[1]}em`;\n        }\n    }\n}\n\nexport function replaceOnlyChild(\n    parentElement: HTMLElement,\n    childId: null | undefined | number | string\n) {\n    // If undefined, do nothing\n    if (childId === undefined) {\n        return;\n    }\n\n    // If null, remove the child\n    if (childId === null) {\n        parentElement.innerHTML = '';\n        return;\n    }\n\n    const currentChildElement = parentElement.firstElementChild;\n\n    // If a child already exists, either move it to the latent container or\n    // leave it alone if it's already the correct element\n    if (currentChildElement !== null) {\n        // Don't reparent the child if not necessary. This way things like\n        // keyboard focus are preserved\n        if (currentChildElement.id === `reflex-id-${childId}`) {\n            return;\n        }\n\n        // Move the child element to a latent container, so it isn't garbage\n        // collected\n        let latentWidgets = document.getElementById('reflex-latent-widgets');\n        latentWidgets?.appendChild(currentChildElement);\n    }\n\n    // Add the replacement widget\n    let newElement = getElementByWidgetId(childId);\n    parentElement?.appendChild(newElement);\n}\n\nexport function replaceChildren(\n    parentElement: HTMLElement,\n    childIds: undefined | (number | string)[]\n) {\n    // If undefined, do nothing\n    if (childIds === undefined) {\n        return;\n    }\n    let latentWidgets = document.getElementById('reflex-latent-widgets')!;\n\n    let curElement = parentElement.firstElementChild;\n    let curIdIndex = 0;\n\n    while (true) {\n        // If there are no more children in the DOM element, add the remaining\n        // children\n        if (curElement === null) {\n            while (curIdIndex < childIds.length) {\n                let curId = childIds[curIdIndex];\n                let newElement = getElementByWidgetId(curId);\n                parentElement.appendChild(newElement!);\n                curIdIndex++;\n            }\n            break;\n        }\n\n        // If there are no more children in the message, remove the remaining\n        // DOM children\n        if (curIdIndex >= childIds.length) {\n            while (curElement !== null) {\n                let nextElement = curElement.nextElementSibling;\n                latentWidgets.appendChild(curElement);\n                curElement = nextElement;\n            }\n            break;\n        }\n\n        // This element is the correct element, move on\n        let curId = childIds[curIdIndex];\n        if (curElement.id === `reflex-id-${curId}`) {\n            curElement = curElement.nextElementSibling;\n            curIdIndex++;\n            continue;\n        }\n\n        // This element is not the correct element, insert the correct one\n        // instead\n        let newElement = getElementByWidgetId(curId);\n        parentElement.insertBefore(newElement!, curElement);\n        curIdIndex++;\n    }\n}\n\nfunction requestFileUpload(message: any): void {\n    // Create a file upload input element\n    let input = document.createElement('input');\n    input.type = 'file';\n    input.multiple = message.multiple;\n\n    if (message.fileExtensions !== null) {\n        input.accept = message.fileExtensions.join(',');\n    }\n\n    input.style.display = 'none';\n\n    function finish() {\n        // Don't run twice\n        if (input.parentElement === null) {\n            return;\n        }\n\n        // Build a `FormData` object containing the files\n        const data = new FormData();\n\n        let ii = 0;\n        for (const file of input.files || []) {\n            ii += 1;\n            data.append('file_names', file.name);\n            data.append('file_types', file.type);\n            data.append('file_sizes', file.size.toString());\n            data.append('file_streams', file, file.name);\n        }\n\n        // FastAPI has trouble parsing empty form data. Append a dummy value so\n        // it's never empty\n        data.append('dummy', 'dummy');\n\n        // Upload the files\n        fetch(message.uploadUrl, {\n            method: 'PUT',\n            body: data,\n        });\n\n        // Remove the input element from the DOM. Removing this too early causes\n        // weird behavior in some browsers\n        input.remove();\n    }\n\n    // Listen for changes to the input\n    input.addEventListener('change', finish);\n\n    // Detect if the window gains focus. This means the file upload dialog was\n    // closed without selecting a file\n    window.addEventListener(\n        'focus',\n        function () {\n            // In some browsers `focus` fires before `change`. Give `change`\n            // time to run first.\n            this.window.setTimeout(finish, 500);\n        },\n        { once: true }\n    );\n\n    // Add the input element to the DOM\n    document.body.appendChild(input);\n\n    // Trigger the file upload\n    input.click();\n}\n\nfunction main() {\n    // Determine the browser's font size\n    var measure = document.createElement('div');\n    measure.style.height = '10em';\n    document.body.appendChild(measure);\n    pixelsPerEm = measure.offsetHeight / 10;\n    document.body.removeChild(measure);\n\n    // Connect to the websocket\n    var url = new URL(\n        `/reflex/ws?sessionToken=${sessionToken}`,\n        window.location.href\n    );\n    url.protocol = url.protocol.replace('http', 'ws');\n    console.log(`Connecting websocket to ${url.href}`);\n    socket = new WebSocket(url.href);\n\n    socket.addEventListener('open', onOpen);\n    socket.addEventListener('message', onMessage);\n    socket.addEventListener('error', onError);\n    socket.addEventListener('close', onClose);\n\n    // Some proxies kill idle websocket connections. Send pings occasionally to\n    // keep the connection alive.\n    //\n    // Make sure to set an ID so the server replies\n    setInterval(() => {\n        sendMessageOverWebsocket({\n            jsonrpc: '2.0',\n            method: 'ping',\n            params: ['ping'],\n            id: `ping-${Date.now()}`,\n        });\n    }, 20_000);\n}\n\nfunction onOpen() {\n    console.log('Connection opened');\n\n    // Send the initial message with user information to the server\n    let userSettings = {};\n    for (let key in localStorage) {\n        if (!key.startsWith('reflex:userSetting:')) {\n            continue;\n        }\n\n        try {\n            userSettings[key.slice('reflex:userSetting:'.length)] = JSON.parse(\n                localStorage[key]\n            );\n        } catch (e) {\n            console.log(`Failed to parse user setting ${key}: ${e}`);\n        }\n    }\n\n    sendMessageOverWebsocket({\n        userSettings: userSettings,\n    });\n}\n\nfunction onMessage(event: any) {\n    // Parse the message JSON\n    let message = JSON.parse(event.data);\n\n    // Handle it\n    processMessage(message);\n}\n\nfunction onError(event: any) {\n    console.log(`Error: ${event.message}`);\n}\n\nfunction onClose(event: any) {\n    console.log(`Connection closed: ${event.reason}`);\n}\n\nexport function sendMessageOverWebsocket(message: object) {\n    if (!socket) {\n        console.log(\n            `Attempted to send message, but the websocket is not connected: ${message}`\n        );\n        return;\n    }\n\n    console.log('Sending message: ', message);\n\n    socket.send(JSON.stringify(message));\n}\n\nexport function callRemoteMethodDiscardResponse(\n    method: string,\n    params: object\n) {\n    sendMessageOverWebsocket({\n        jsonrpc: '2.0',\n        method: method,\n        params: params,\n    });\n}\n\nmain();\n"]}